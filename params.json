{"name":"Event hub","tagline":"Slim library to allow different components to communicate with each other using messages","body":"# EventHub\r\n\r\nEventHub is a slim library to allow your different asynchronous components inside an app to communicate with each\r\nother with very minimal overhead. Basic motivation of this idea was to allow activity to understand the state of its\r\ndifferent fragments inside your Android application.\r\n\r\n\r\n## Architecture\r\n\r\nEventHub is a singleton class which can be accessed through getInstance() method. Architecture is based on two\r\ncomponents, one is Event Generator and another is Event Listeners. Event generating components register their\r\naction using registerEventHubAction method. And listeners register for listening the events using\r\nregisterListenerForAction method.\r\nAction generator publish and action using actionHappened method, and it remains in the store throughout the lifecycle\r\n unless the action generator class un-registers itself. So that even if some new listener joins an event family, it\r\n gets the last message happened and can decide the state of itself.\r\n\r\n\r\n```\r\n                                     +--------------------+\r\n                                     |                    |\r\n                                 +---> Event Listener 1   |\r\n                                 |   |                    |\r\n+-------------+   +----------+   |   +--------------------+\r\n|             |   |          |   |   +--------------------+\r\n| Event       +---> EventHub +---+   |                    |\r\n| Generator   |   |          |   +---> Event Listener 2   |\r\n+-------------+   +----------+   |   |                    |\r\n                                 |   +--------------------+\r\n                                 |\r\n                                 |   +--------------------+\r\n                                 |   |                    |\r\n                                 +---+ Event Listener n   |\r\n                                     |                    |\r\n                                     +--------------------+\r\n```\r\n\r\n\r\n## For using it with Android\r\n\r\nYou can build this library and use jar in libs to use it with your Android application. This library does not use any\r\n specific library related with Android. In EventHubAction you can use Bundle instead. Both EventHubAction and\r\n EventHubActionListener are templatized so you can use any kind of object to represent the data related with your\r\n action.\r\n\r\n## Running example (Android APP)\r\n\r\nI have used this library in AppSurfer (http://appsurfer.com) mobile app as well as our mobile SDK,\r\nfor fragment state communication. We had three fragments inside a ViewPager (each having its own type of filters)\r\nshowing apps related to the current category (somewhat similar to the Google Play store). Now to avoid using more\r\nmemory, I had enabled caching for only 1 invisible fragment and the third fragment would get destroyed as soon as it\r\nleaves the cache enabled quota (using public void setOffscreenPageLimit (int limit)) of ViewPager. The category\r\nselection dialog was a separate fragment and had its own lifecycle. Now I had to store the current selected category\r\nby user so that as he traverses through the ViewPager he should see the updated category on each fragments.\r\n\r\nIn this scenario I used EventHub on the main activity, to which category fragment registers itself as category action\r\n event generator and all the fragments of the view pager register themselves as event listener for category action.\r\n So whenever a fragment gets resumed, it registers for the action, gets the latest message on that hub,\r\n and shows that category.\r\n\r\n(This is very similar to what google play does, when it shows a tab bar with Top Free,\r\nTop paid and on the leftmost side it has a category selection fragment).\r\n\r\n## Licence\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Akshay Deo\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}